// src/middleware/authMiddleware.ts (G√úNCEL HALƒ∞)
import { Request, Response, NextFunction } from "express";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";

dotenv.config();

// JWT secret key'inizi buraya veya √ßevre deƒüi≈ükenlerine ekleyin
const JWT_SECRET = process.env.JWT_SECRET || "supergizli_anahtar123";
 // L√ºtfen bunu ger√ßek bir secret key ile deƒüi≈ütirin!

// üéâ Express Request tipini geni≈ületiyoruz ki, middleware'den sonra req.user eri≈üilebilir olsun

console.log("üîê authenticateToken middleware √ßalƒ±≈ütƒ±");

export const authenticateToken = (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  const authHeader = req.headers["authorization"] || "";
  console.log("üî• Gelen authHeader:", authHeader); // ‚Üê Burasƒ± lazƒ±m

  const token = authHeader.startsWith("Bearer ")
    ? authHeader.split(" ")[1]
    : null;
  if (!token) {
    console.warn("‚ùå Token eksik veya hatalƒ± formatta:", authHeader);
    return res
      .status(401)
      .json({ message: "Yetkilendirme tokenƒ± eksik veya hatalƒ± formatta." });
  }

  console.log("JWT_SECRET:", JWT_SECRET);
  console.log("Gelen token:", token);
  console.log("üõ°Ô∏è [authMiddleware] JWT_SECRET:", process.env.JWT_SECRET);

  jwt.verify(token, JWT_SECRET, (err, userPayload) => {
    if (err) {
      console.error("JWT doƒürulama hatasƒ±:", err.name, err.message); // üëà daha fazla detay
      return res
        .status(403)
        .json({ message: "Ge√ßersiz veya s√ºresi dolmu≈ü token." });
    }

    // userPayload'ƒ±n beklenen yapƒ±da olduƒüundan emin olun
    if (
      typeof userPayload !== "object" ||
      userPayload === null ||
      !("userId" in userPayload)
    ) {
      console.error("JWT payload formatƒ± beklenmiyor:", userPayload);
      return res.status(403).json({ message: "Ge√ßersiz token formatƒ±." });
    }

    // üéâ req.user'a doƒüru tipte atama yapƒ±n
    req.user = userPayload as Express.Request["user"];
    next();
  });
};

// Rol bazlƒ± yetkilendirme (isteƒüe baƒülƒ± ama √∂nerilir, AuthContext.tsx'den geldi)
export const authorizeRoles = (...roles: string[]) => {
  return (req: Request, res: Response, next: NextFunction) => {
    if (!req.user || !roles.includes(req.user.role)) {
      return res.status(403).json({ message: "Bu i≈üleme yetkiniz yok." });
    }
    next();
  };
};
